package org.example;

// 문제 : `무기 a무기 = new 칼();` 가 실행되는 세부과정을 자세히 쓰세요.

class Main {
    public static void main(String[] args) {
        // * double d = 5.5; 의 처리과정
        // 1 : 실수 5.5가 생긴다.
        // 2 : 오직 실수만 담을 수 있는 변수 d가 생성된다.
        // 3 : d는 5.5가 자신안에 들어 올 수 있는지 판단한다.(가능)
        // 4 : d변수에 실수 5.5가 들어간다.
        double d = 5.5;

        // * double dd = 5; 의 처리과정
        // 1 : 정수 5가 생긴다.
        // 2 : 오직 실수만 담을 수 있는 변수 dd가 생성된다.
        // 3 : dd는 5가 자신안에 들어 올 수 있는지 판단한다.
        // 4 : 5는 정수이기 때문에 들어 올 수 없다고 판단한다.(불가능)
        // 5 : dd가 아쉬워하는 5에게 이렇게 이야기 합니다. `니가 실수로 변환될 수 있다면 들어올 수 있다.`
        // 6 : 5는 자신의 형태를 버리고 실수화 한다. 즉 5.0으로 변신하다.(캐스팅, 또는 형변환)
        // 7 : dd로 5.0이 들어간다.
        double dd = 5;

        // * int i = 5.5; 의 처리과정
        // 1 : 실수 5.5가 생긴다.
        // 2 : 오직 정수만 담을 수 있는 변수 i가 생성된다.
        // 3 : i는 5.5가 자신에게 담길 수 있는지 체크한다.(불가능)
        // 4 : i는 아쉬워하는 5.5에게 이렇게 이야기 합니다. `니가 정수가 된다면 들어올 수 있다.`
        // 5 : 5.5는 도저히 불가능 요구를 받고 치명적인 에러를 발생시킨다.(캐스팅 불가능 으로 인한 에러)
        //int i = 5.5;


        무기m a무기 = new 칼m();
        // 무기m a무기 = new 칼m();의 처리과정
        // 1. a무기라는 새로운 변수를 만들려고 한다.
        // 2. 칼m이라는 설계도에 새로운 a무기 리모컨을 만든다.
        // 3. 하지만 정작 a무기는 무기m이라는 리모컨이 다룰 수 있음.
        // 4. 그래서 무기m이라는 클래스를 새로 만든다.
        // 5. 하지만 그래도 칼m은 무기m이 아니기에 a무기를 다룰 수가 없다.
        // 6. a무기에 닿기 위해 칼m은 무기m의 자식이 되기로 한다.
        // 7. 칼m 리모컨은 무기m 리모컨과 완전히 같아졌고, 칼m 리모컨은 a무기를 다룰 수 있게 됐다.
    }
}

class 무기m {

}

class 칼m extends 무기m{

}